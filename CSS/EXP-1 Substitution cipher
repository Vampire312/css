#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26

// Function to encrypt text using a Caesar cipher
void caesarEncrypt(char *text, int shift) {
    int i;
    for(i = 0; text[i] != '\0'; ++i) {
        if(text[i] >= 'a' && text[i] <= 'z') {
            text[i] = (text[i] - 'a' + shift) % ALPHABET_SIZE + 'a';
        } else if(text[i] >= 'A' && text[i] <= 'Z') {
            text[i] = (text[i] - 'A' + shift) % ALPHABET_SIZE + 'A';
        }
    }
}

// Function to decrypt text using a Caesar cipher
void caesarDecrypt(char *text, int shift) {
    int i;
    for(i = 0; text[i] != '\0'; ++i) {
        if(text[i] >= 'a' && text[i] <= 'z') {
            text[i] = (text[i] - 'a' - shift + ALPHABET_SIZE) % ALPHABET_SIZE + 'a';
        } else if(text[i] >= 'A' && text[i] <= 'Z') {
            text[i] = (text[i] - 'A' - shift + ALPHABET_SIZE) % ALPHABET_SIZE + 'A';
        }
    }
}

int main() {
    char plaintext[100];
    char ciphertext[100];
    int key;

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);

    printf("Enter encryption key (shift value): ");
    scanf("%d", &key);

    // Encryption
    strcpy(ciphertext, plaintext); // Copy plaintext to ciphertext
    caesarEncrypt(ciphertext, key);

    printf("Encrypted text: %s\n", ciphertext);

    // Decryption
    caesarDecrypt(ciphertext, key);

    printf("Decrypted text: %s\n", ciphertext);

    return 0;
}
